app.js
riginal concept by Tom Bogner @dastom on Dribble: https://dribbble.com/shots/6767548-The-Three-Graces-Concept

import { useRef } from 'react'
import { Canvas, extend, useFrame } from '@react-three/fiber'
import { useGLTF, SoftShadows, Html, CameraControls } from '@react-three/drei'
import { easing, geometry } from 'maath'

extend(geometry)

export default function App() {
  return (
    <Canvas shadows="basic" eventSource={document.getElementById('root')} eventPrefix="client" camera={{ position: [0, 1.5, 14], fov: 45 }}>
      <fog attach="fog" args={['black', 0, 20]} />
      <pointLight position={[10, -10, -20]} intensity={10} />
      <pointLight position={[-10, -10, -20]} intensity={10} />
      <Model position={[0, -5.5, 3]} rotation={[0, -0.2, 0]} />
      <SoftShadows samples={3} />
      <CameraControls minPolarAngle={0} maxPolarAngle={Math.PI / 2} minAzimuthAngle={-Math.PI / 2} maxAzimuthAngle={Math.PI / 2} />
    </Canvas>
  )
}

/*
Auto-generated by: https://github.com/react-spring/gltfjsx
Author: 3DLadnik (https://sketchfab.com/3DLadnik)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/3d-printable-the-three-graces-58e0ae19e2984b86883edc41bf43415a
Title: 3D Printable The Three Graces
*/
function Model(props) {
  const group = useRef()
  const light = useRef()
  const { nodes } = useGLTF('/graces-draco.glb')
  useFrame((state, delta) => {
    easing.dampE(group.current.rotation, [0, -state.pointer.x * (Math.PI / 10), 0], 1.5, delta)
    easing.damp3(group.current.position, [0, -5.5, 1 - Math.abs(state.pointer.x)], 1, delta)
    easing.damp3(light.current.position, [state.pointer.x * 12, 0, 8 + state.pointer.y * 4], 0.2, delta)
  })
  return (
    <group ref={group} {...props}>
      <mesh castShadow receiveShadow geometry={nodes.Node_3.geometry} rotation={[-Math.PI / 2, 0, 0]} scale={0.2} dispose={null}>
        <meshLambertMaterial color="#404044" />
      </mesh>
      <Annotation position={[1.75, 3, 2.5]}>
        Thalia <span style={{ fontSize: '1.5em' }}>ðŸŒ—</span>
      </Annotation>
      <Annotation position={[-4.5, 3.6, -3]}>
        Euphrosyne <span style={{ fontSize: '1.5em' }}>ðŸŒ–</span>
      </Annotation>
      <Annotation position={[1.5, 8, -3]}>
        <span style={{ fontSize: '1.5em' }}>ðŸŒ•</span> Aglaia
      </Annotation>
      <spotLight angle={0.5} penumbra={0.5} ref={light} castShadow intensity={10} shadow-mapSize={1024} shadow-bias={-0.001}>
        <orthographicCamera attach="shadow-camera" args={[-10, 10, -10, 10, 0.1, 50]} />
      </spotLight>
    </group>
  )
}

function Annotation({ children, ...props }) {
  return (
    <Html
      {...props}
      transform
      occlude="blending"
      geometry={
        /** The geometry is optional, it allows you to use any shape.
         *  By default it would be a plane. We need round edges here ...
         */
        <roundedPlaneGeometry args={[1.66, 0.47, 0.24]} />
      }>
      <div className="annotation" onClick={() => console.log('.')}>
        {children}
      </div>
    </Html>
  )
}


index.Html
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Web site created using create-react-app"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <link href="https://fonts.googleapis.com/css?family=Amiri|Josefin+Sans:600&display=swap" rel="stylesheet">
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>React App</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>

style.css
@import url('https://rsms.me/inter/inter.css');

* {
  box-sizing: border-box;
}

html,
body,
#root {
  width: 100%;
  height: 100%;
  margin: 0;
  padding: 0;
  -webkit-touch-callout: none;
  -webkit-user-select: none;
  -khtml-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
  overflow: hidden;
}

#root {
  overflow: auto;
}

body {
  position: fixed;
  overflow: hidden;
  overscroll-behavior-y: none;
  font-family: 'Amiri', serif;
  color: white;
  background: black;
  background: radial-gradient(circle at bottom center, rgba(60, 60, 60, 1) 0%, rgba(0, 0, 0, 1) 58%);
  cursor: url('https://github.com/chenglou/react-motion/raw/master/demos/demo8-draggable-list/cursor.png') 39 39, auto;
  font-family: inter;
}

@keyframes fade-in {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

canvas {
  opacity: 0;
  touch-action: none;
  animation: fade-in 2s ease 0s forwards;
}

.annotation {
  transition: all 0.5s ease-in-out;
  box-shadow: inset 0 0 0 0.09px white;
  cursor: pointer;
  outline: none;
  border: none;
  font-size: 8px;
  font-weight: 300;
  background: indianred;
  color: white;
  padding: 2px 10px;
  border-radius: 20px;
  letter-spacing: 1px;
  display: flex;
  justify-content: center;
  align-items: center;
  gap: 5px;
}

.annotation:hover {
  box-shadow: inset 250px 0 0 0 white;
  color: black;
}

.loader {
  font-family: 'Josefin Sans', sans-serif;
  font-weight: 900;
}

.header {
  pointer-events: none;
  position: absolute;
  top: 6em;
  left: 0;
  color: white;
  font-family: 'Josefin Sans', sans-serif;
  font-weight: 900;
  font-size: 0.8em;
  width: 100%;
  text-align: center;
}

.header > span {
  padding: 0 3.25em;
  letter-spacing: 0.4em;
  position: relative;
}

.header > span.active::after {
  content: '';
  position: absolute;
  bottom: -10px;
  left: calc(50% - 4px);
  transform: translate3d(-50%, 0, 0);
  width: 20px;
  height: 2px;
  background: indianred;
}

.middle {
  pointer-events: none;
  position: absolute;
  bottom: 2.5em;
  left: 50%;
  transform: translate3d(-50%, 0, 0);
  font-size: 2em;
  letter-spacing: 0.5em;
  text-align: center;
  width: 100%;
}

.middle > h1 {
  line-height: 0.9em;
  font-weight: 100;
}

.middle > h1::after {
  content: '';
  position: absolute;
  bottom: 10px;
  left: calc(50% - 25px);
  width: 50px;
  height: 2px;
  background: white;
}

.middle > h2 {
  font-size: 1em;
  line-height: 0px;
  font-weight: 100;
  letter-spacing: 0.25em;
  font-style: italic;
}

.prettierrc
{
  "printWidth": 160,
  "tabWidth": 2,
  "useTabs": false,
  "semi": false,
  "singleQuote": true,
  "trailingComma": "all",
  "bracketSpacing": true,
  "jsxBracketSameLine": true,
  "fluid": false
}

index.js
import { createRoot } from 'react-dom/client'
import React, { Suspense } from 'react'
import './styles.css'
import App from './App'

createRoot(document.getElementById('root')).render(
  <>
    <Suspense fallback={null}>
      <App />
    </Suspense>
    <div className="header">
      <span className="active">ART</span>
      <span>ABOUT</span>
      <span>VISIT</span>
      <span>SHOP</span>
    </div>
  </>,
)
